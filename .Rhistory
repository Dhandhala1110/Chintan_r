sheet = "Fehler Blasformteil")
excelliste <- customizeExcellist(excelliste)
excel2ms(excellist = excelliste, netname = "Blasformteil",
firstfault = "Butzenabfall")
net <- createDAG(read.table("MSBlasformteil.txt"))
excelliste <- readxl::read_xlsx("Parameterliste.xlsm",
sheet = "Fehler Blasformteil")
excelliste <- customizeExcellist(excelliste)
data <- simulateRandDatasetBig(excelliste, 100000,"Butzenabfall")
bnfitted <- bn.fit(net,data)
write.net("actual_bn_Blasformteil.net", bnfitted)
runApp()
# read in excel list 'Blasformteil'
excelliste <- readxl::read_xlsx("Parameterliste.xlsm",
sheet = "Fehler Blasformteil")
excelliste <- customizeExcellist(excelliste)
excel2ms(excellist = excelliste, netname = "Blasformteil",
firstfault = "Butzenabfall")
net <- createDAG(read.table("MSBlasformteil.txt"))
excelliste <- readxl::read_xlsx("Parameterliste.xlsm",
sheet = "Fehler Blasformteil")
excelliste <- customizeExcellist(excelliste)
data <- simulateRandDatasetBig(excelliste, 100000,"Butzenabfall")
bnfitted <- bn.fit(net,data)
write.net("actual_bn_Blasformteil.net", bnfitted)
# read in excel list 'Blasformteil'
excelliste <- readxl::read_xlsx("Parameterliste.xlsm",
sheet = "Fehler Blasformteil")
excelliste <- customizeExcellist(excelliste)
excel2ms(excellist = excelliste, netname = "Blasformteil",
firstfault = "Butzenabfall")
net <- createDAG(read.table("MSBlasformteil.txt"))
excelliste <- readxl::read_xlsx("Parameterliste.xlsm",
sheet = "Fehler Blasformteil")
excelliste <- customizeExcellist(excelliste)
data <- simulateRandDatasetBig(excelliste, 100000,"Butzenabfall")
bnfitted <- bn.fit(net,data)
write.net("actual_bn_Blasformteil.net", bnfitted)
library(gridExtra)
net <- read.net("actual_bn.net")
data <- rbn(net, 100)
# load packages
library(bnlearn)
library(Rgraphviz)
source("functions.R")
net <- read.net("actual_bn.net")
data <- rbn(net, 100)
net_new <- bn.fit(bnfit2DAG(net),data)
graphviz.chart(net_new, type = "barprob", bar.col = "gold", layout = "dot",
strip.bg = "lightskyblue")
graphviz.chart(net_new, type = "barprob", bar.col = "gold", layout = "dot",
strip.bg = "lightskyblue")
pdf(file = "BarchartLernprozess.pdf")
net_new <- bn.fit(bnfit2DAG(net),data)
graphviz.chart(net, type = "barprob", bar.col = "gold", layout = "dot",
strip.bg = "lightskyblue")
graphviz.chart(net_new, type = "barprob", bar.col = "gold", layout = "dot",
strip.bg = "lightskyblue")
dev.off()
data <- rbn(net, 100)
net_new <- bn.fit(bnfit2DAG(net),data)
graphviz.chart(net_new, type = "barprob", bar.col = "gold", layout = "dot",
strip.bg = "lightskyblue")
pdf(file = "BarchartLernprozess.pdf")
graphviz.chart(net, type = "barprob", bar.col = "gold", layout = "dot",
strip.bg = "lightskyblue")
graphviz.chart(net_new, type = "barprob", bar.col = "gold", layout = "dot",
strip.bg = "lightskyblue")
dev.off()
pdf("q.pdf", height=11, width=10)
grid.table(data)
dev.off()
pdf("q.pdf", height=11, width=30)
grid.table(data)
dev.off()
pdf("q.pdf", height=28, width=30)
grid.table(data)
dev.off()
shiny::runApp()
runApp()
shiny::runApp()
net <- read.net("actual_bn.net")
extractLevelsFromBN(bayesnet = net)
levels <- extractLevelsFromBN(bayesnet = net)
estimateInference(net,"Kratzer",levels)
error <- "SchlauchGeradeauslauf"
estimateInference(net,error,levels)
error <- "SchlauchlaufGeradeauslauf"
estimateInference(net,error,levels)
runApp()
start <- Sys.time()
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time()-start)
error <- "Kratzer"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "SchlauchlaufGeradeauslauf"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "Kratzer"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "SchlauchlaufGeradeauslauf"
error <- "Kratzer"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "SchlauchlaufGeradeauslauf"
error <- "Kratzer"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "Kratzer"
error <- "SchlauchlaufGeradeauslauf"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "SchlauchlaufGeradeauslauf"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "Kratzer"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "SchlauchlaufGeradeauslauf"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
error <- "VorformlingGlaenzend"
start <- Sys.time()
estimateInference(net,error,levels)
print(Sys.time() - start)
runApp()
runApp()
runApp()
runApp()
# load packages
library(bnlearn)
library(Rgraphviz)
source("functions.R")
ms <- read.table("MSBlasformteil.txt")
net <- read.net("actual_bn.net")
View(ms)
for (i in 1:ncol(ms)) {
}
ms <- read.table("MSBlasformteil.txt")
for (i in 1:ncol(ms)) {
dag <- createDAG
graphviz.plot(dag, shape = "ellipse")
}
for (i in 1:ncol(ms)) {
dag <- createDAG(ms)
graphviz.plot(dag, shape = "ellipse")
}
for (i in 1:ncol(ms)) {
dag <- createDAG(ms[i])
graphviz.plot(dag, shape = "ellipse")
}
for (i in 1:ncol(ms)) {
pdf("Blasformteil_Subs.pdf")
dag <- createDAG(ms[i])
graphviz.plot(dag, shape = "ellipse")
dev.off()
}
for (i in 1:ncol(ms)) {
pdf("Blasformteil_Subs.pdf")
dag <- createDAG(ms[i])
graphviz.plot(dag, shape = "ellipse")
}
dev.off()
pdf("Blasformteil_Subs.pdf")
for (i in 1:ncol(ms)) {
dag <- createDAG(ms[i])
graphviz.plot(dag, shape = "ellipse")
}
dev.off()
ms <- read.table("MSBlasformteil.txt")
pdf("Blasformteil_Subs.pdf")
for (i in 1:ncol(ms)) {
dag <- createDAG(ms[i])
graphviz.plot(dag, shape = "ellipse")
}
dev.off()
for (i in 1:ncol(ms)) {
dag <- createDAG(ms[i])
graphviz.plot(dag, shape = "ellipse")
sys.sleep(1)
}
for (i in 1:ncol(ms)) {
dag <- createDAG(ms[i])
graphviz.plot(dag, shape = "ellipse")
Sys.sleep(1)
}
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
pdf("Blasformteil_Subs.pdf")
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf")
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
graphviz.plot(dag, shape = "ellipse")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
pdf("Blasformteil_Sub.pdf", height = 20)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 10)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 5)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 3)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 2, width = 5)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 1, width = 5)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 1.5, width = 5)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 1.9, width = 5)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 1.8, width = 5)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 1.9, width = 5)
dag <- createDAG(ms["FaltenArtikel"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
shiny::runApp()
net <- read.net("actual_bn_Blasformteil.net")
causeanalysis_strongestdyn(bayesnet=net,event="ArtiklhaengtForm",knoEvi=NULL,knoState=NULL)
causeanalysis_strongestdyn(bayesnet=net,event="ArtikelhaengtForm",knoEvi=NULL,knoState=NULL)
View(net)
causeanalysis_strongestdyn(bayesnet=net,event="ArtikelhaengtFrom",knoEvi=NULL,knoState=NULL)
list <- causeanalysis_strongestdyn(bayesnet=net,event="ArtikelhaengtFrom",knoEvi=NULL,knoState=NULL)
library(gridExtra)
class(list)
pdf("q1.pdf", height=28, width=30)
grid.table(list)
dev.off()
pdf("q1.pdf", height=10, width=10)
grid.table(list)
dev.off()
pdf("q1.pdf", height=10, width=10)
grid.table(list)
dev.off()
pdf("q1.pdf", height=5, width=5)
pdf("q1.pdf", height=5, width=5)
grid.table(list)
dev.off()
dag <- createDAG(ms["ArtikelhaengtFrom"])
graphviz.plot(dag, shape = "ellipse")
pdf("Blasformteil_Sub.pdf", height = 1.9, width = 5)
dag <- createDAG(ms["ArtikelhaengtFrom"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 1.9, width = 4)
dag <- createDAG(ms["ArtikelhaengtFrom"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
pdf("Blasformteil_Sub.pdf", height = 1.9, width = 3)
dag <- createDAG(ms["ArtikelhaengtFrom"])
graphviz.plot(dag, shape = "ellipse")
dev.off()
net <- read.net("actual_bn_Blasformteil.net")
runApp()
library(shiny); source('start.R')
# load packages
library(bnlearn)
library(Rgraphviz)
source("functions.R")
net <- read.net("actual_bn.net")
bn.fit.barchart(net$Kratzer)
pdf("CPT.pdf", height=5, width=5)
bn.fit.barchart(net$Kratzer)
dev.off()
pdf("CPT.pdf", height=5, width=5)
bn.fit.barchart(net$VerbrRohstoffDuese)
dev.off()
bn.fit.barchart(net$Kratzer)
pdf("CPT.pdf", height=5, width=5)
bn.fit.barchart(net$Kratzer)
dev.off()
net$Kratzer$prob
shiny::runApp()
library(shiny); source('start.R')
shiny::runApp()
# load packages
library(bnlearn)
library(Rgraphviz)
source("functions.R")
dag <- bnfit2DAG(renewBN("Blasformteil"))
## new test function
## read in actual bayes net, can distinguish which type
renewBN <- function(bnname){
if(bnname == "Vorformling"){
cat("Lade Bayes Netz 'Vorformling'...\n")
return(read.net("actual_bn_Vorformling.net"))
}
else if(bnname == "Blasformteil"){
cat("Lade Bayes Netz 'Blasformteil'...\n")
return(read.net("actual_bn_Blasformteil.net"))
}
cat("Die Auswahl des Bayes Netzes hat nicht funktioniert\n")
return(NULL)
}
dag <- bnfit2DAG(renewBN("Blasformteil"))
nodelist <- as.list(leaf.nodes(dag))
nchighlight <- list(background = "yellow", border = "black")
bnviewer::viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "90vh",
bayesianNetwork.layout = "grid",
bayesianNetwork.title = "Diskretes Bayes Netz -
Gesamtübersicht",
node.shape = "ellipse",
node.colors = list(background = "#00a65a",
border = "black",
highlight = nchighlight),
node.font = list(color = "black", face="Arial",
size = 25),
edges.width = 3,
options.highlightNearest = TRUE,
clusters = list(
list(label = "Fehler",
shape = "icon",
icon = list(color = "orange"),
nodes = nodelist)))
bnviewer::viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "90vh",
bayesianNetwork.layout = "grid",
bayesianNetwork.title = "Diskretes Bayes Netz -
Gesamtübersicht",
node.shape = "ellipse",
node.colors = list(background = "#00a65a",
border = "black",
highlight = nchighlight),
node.font = list(color = "black", face="Arial",
size = 25),
edges.width = 3,
options.highlightNearest = TRUE,
clusters = list(
list(label = "Fehler",
shape = "icon",
icon = list(color = "orange"),
nodes = nodelist)))
nchighlight <- list(background = "yellow", border = "black")
bnviewer::viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "90vh",
bayesianNetwork.layout = "grid",
bayesianNetwork.title = "Diskretes Bayes Netz -
Gesamtübersicht",
node.shape = "ellipse",
node.colors = list(background = "#00a65a",
border = "black",
highlight = nchighlight),
node.font = list(color = "black", face="Arial",
size = 25),
edges.width = 3,
options.highlightNearest = TRUE,
clusters = list(
list(label = "Fehler",
shape = "icon",
icon = list(color = "orange"),
nodes = nodelist)))
dag <- bnfit2DAG(renewBN("Blasformteil"))
nodelist <- as.list(leaf.nodes(dag))
nchighlight <- list(background = "yellow", border = "black")
bnviewer::viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "90vh",
bayesianNetwork.layout = "grid",
bayesianNetwork.title = "Diskretes Bayes Netz -
Gesamtübersicht",
node.shape = "ellipse",
node.colors = list(background = "#00a65a",
border = "black",
highlight = nchighlight),
node.font = list(color = "black", face="Arial",
size = 25),
edges.width = 3,
options.highlightNearest = TRUE,
clusters = list(
list(label = "Fehler",
shape = "icon",
icon = list(color = "orange"),
nodes = nodelist)))
bnviewer::viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "90vh",
bayesianNetwork.layout = "grid",
bayesianNetwork.title = "Diskretes Bayes Netz -
Gesamtübersicht",
node.shape = "ellipse")
bnviewer::viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "90vh",
bayesianNetwork.layout = "layout_on_grid",
bayesianNetwork.title = "Diskretes Bayes Netz -
Gesamtübersicht",
node.shape = "ellipse",
node.colors = list(background = "#00a65a",
border = "black",
highlight = nchighlight),
node.font = list(color = "black", face="Arial",
size = 25),
edges.width = 3,
options.highlightNearest = TRUE,
clusters = list(
list(label = "Fehler",
shape = "icon",
icon = list(color = "orange"),
nodes = nodelist)))
pdf("Gesamt.pdf")
bnviewer::viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "90vh",
bayesianNetwork.layout = "layout_on_grid",
bayesianNetwork.title = "Diskretes Bayes Netz -
Gesamtübersicht",
node.shape = "ellipse",
node.colors = list(background = "#00a65a",
border = "black",
highlight = nchighlight),
node.font = list(color = "black", face="Arial",
size = 25),
edges.width = 3,
options.highlightNearest = TRUE,
clusters = list(
list(label = "Fehler",
shape = "icon",
icon = list(color = "orange"),
nodes = nodelist)))
dev.off()
library(shiny); source('start.R')
library(shiny); source('start.R')
source('start.R')
shiny::runApp()
## Only run this example in interactive R sessions
if (interactive()) {
# pass a callback function to DataTables using I()
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
)
}
runApp()
# set true when use the first time
firstuse <- FALSE
runApp()
library(reticulate) # to execute python file
shiny::runApp()
source('start.R')
runApp()
runApp()
runApp()
